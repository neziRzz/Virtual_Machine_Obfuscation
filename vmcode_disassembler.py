bytecode = [0xDC, 0x00, 0x00, 0x00, 0x28, 0x00, 0xBD, 0x03, 0x0F, 0x00, 
  0x13, 0x51, 0x18, 0x33, 0x01, 0xDC, 0x00, 0x02, 0x00, 0xB7, 
  0x02, 0x2E, 0x00, 0x29, 0x02, 0x0F, 0x00, 0x6D, 0x30, 0x18, 
  0x33, 0x01, 0xDC, 0x00, 0x04, 0x00, 0xB7, 0x02, 0x0B, 0x00, 
  0x29, 0x02, 0x0F, 0x00, 0x6F, 0x33, 0x18, 0x33, 0x01, 0xDC, 
  0x00, 0x06, 0x00, 0x28, 0x00, 0x69, 0x03, 0x0F, 0x00, 0xC8, 
  0x34, 0x18, 0x33, 0x01, 0xDC, 0x00, 0x08, 0x00, 0xB7, 0x02, 
  0x2B, 0x00, 0x29, 0x02, 0xB7, 0x02, 0x57, 0x00, 0x29, 0x02, 
  0x0F, 0x00, 0x0F, 0x5F, 0x18, 0x33, 0x01, 0xDC, 0x00, 0x0A, 
  0x00, 0xB7, 0x02, 0x61, 0x00, 0x29, 0x02, 0xB7, 0x02, 0x61, 
  0x00, 0x29, 0x02, 0xB7, 0x02, 0x40, 0x00, 0x29, 0x02, 0x0F, 
  0x00, 0x23, 0x68, 0x18, 0x33, 0x01, 0xDC, 0x00, 0x0C, 0x00, 
  0xFB, 0x00, 0x4F, 0x03, 0x0F, 0x00, 0xE5, 0x2D, 0x18, 0x33, 
  0x01, 0xDC, 0x00, 0x0E, 0x00, 0xB7, 0x02, 0x46, 0x00, 0x29, 
  0x02, 0x0F, 0x00, 0x77, 0x33, 0x18, 0x33, 0x01, 0xDC, 0x00, 
  0x10, 0x00, 0xB7, 0x02, 0x1F, 0x00, 0x29, 0x02, 0xB7, 0x02, 
  0x1C, 0x00, 0x29, 0x02, 0xB7, 0x02, 0x26, 0x00, 0x29, 0x02, 
  0x0F, 0x00, 0x4B, 0x39, 0x18, 0x33, 0x01, 0xDC, 0x00, 0x12, 
  0x00, 0xB7, 0x02, 0x0F, 0x00, 0x29, 0x02, 0xB7, 0x02, 0x57, 
  0x00, 0x29, 0x02, 0xB7, 0x02, 0x3F, 0x00, 0x29, 0x02, 0x0F, 
  0x00, 0x54, 0x5F, 0x18, 0x33, 0x01, 0xDC, 0x00, 0x14, 0x00, 
  0xB7, 0x02, 0x37, 0x00, 0x29, 0x02, 0xB7, 0x02, 0x58, 0x00, 
  0x29, 0x02, 0xB7, 0x02, 0x4C, 0x00, 0x29, 0x02, 0x0F, 0x00, 
  0x41, 0x31, 0x18, 0x33, 0x01, 0xDC, 0x00, 0x16, 0x00, 0xB7, 
  0x02, 0x24, 0x00, 0x29, 0x02, 0x0F, 0x00, 0x1D, 0x5F, 0x18, 
  0x33, 0x01, 0xDC, 0x00, 0x18, 0x00, 0xB7, 0x02, 0x1A, 0x00, 
  0x29, 0x02, 0xB7, 0x02, 0x1C, 0x00, 0x29, 0x02, 0x0F, 0x00, 
  0x6E, 0x34, 0x18, 0x33, 0x01, 0xDC, 0x00, 0x1A, 0x00, 0xFB, 
  0x00, 0x80, 0x03, 0x0F, 0x00, 0xEE, 0x60, 0x18, 0x33, 0x01, 
  0xDC, 0x00, 0x1C, 0x00, 0xFB, 0x00, 0x09, 0x01, 0x0F, 0x00, 
  0x6A, 0x20, 0x18, 0x33, 0x01, 0x34, 0xCE, 0x50]
case = [0xB7, 0x4E, 0xDC, 0x67, 0x96, 0x0C, 0x28, 0x6A, 0xFB, 0xFF, 
  0x5D, 0x6C, 0x2E, 0x5F, 0x0B, 0x63, 0x57, 0x01, 0x29, 0x4A, 
  0x8F, 0x25, 0x72, 0x83, 0x39, 0x9F, 0xFA, 0x58, 0x3E, 0x10, 
  0x59, 0x0F, 0x55, 0x05, 0xAB, 0x14, 0x4F, 0x54, 0xBD, 0x27, 
  0x0D, 0x18, 0x87, 0x1D, 0xF9, 0xCE, 0x50, 0x34, 0xA8, 0x32, 
  0xBE, 0x5B, 0x35, 0xCF, 0x3F, 0x13, 0xA3, 0x7D, 0xC1, 0x8C, 
  0x78, 0xC2, 0x03, 0x84, 0x20, 0x70, 0xFE, 0xEB, 0xBC, 0x51, 
  0x52, 0xBF, 0x1E, 0x2F, 0x0E, 0x5A, 0xF5, 0x68, 0x82, 0xFC, 
  0xC5, 0xA0, 0x6D, 0xDF, 0xBA, 0x0A, 0xCB, 0x64, 0x06, 0x71, 
  0xC3, 0x6B, 0xB3, 0x79, 0xF2, 0xEE, 0x7C, 0xC8, 0xE3, 0x89, 
  0xED, 0x98, 0x88, 0x43, 0x8B, 0xE7, 0x92, 0xA7, 0xEA, 0xCC, 
  0x5E, 0xDE, 0xA2, 0x94, 0x7F, 0xD6, 0x4D, 0x53, 0xAC, 0xAF, 
  0x81, 0x48, 0x91, 0x90, 0xB1, 0xEC, 0xAD, 0xF3, 0xB4, 0xC7, 
  0xB2, 0x02, 0x2A, 0x76, 0x9B, 0x8A, 0xA6, 0x4B, 0xD8, 0x15, 
  0xA1, 0xF6, 0x09, 0xCD, 0xDA, 0x08, 0x1F, 0x73, 0xEF, 0x49, 
  0xE0, 0x37, 0x62, 0x04, 0xC0, 0x80, 0xB9, 0xB5, 0xA4, 0x07, 
  0xC9, 0x60, 0xA9, 0xB6, 0x42, 0xCA, 0xC4, 0x9D, 0xD1, 0x31, 
  0x21, 0x30, 0x56, 0x26, 0x3C, 0xE8, 0xD9, 0x45, 0x99, 0xD0, 
  0x3B, 0xF4, 0x16, 0xDD, 0xE5, 0xE4, 0xE1, 0x1A, 0x1B, 0x74, 
  0xF1, 0x11, 0x6E, 0xE2, 0x33, 0x7B, 0xD4, 0x66, 0xD7, 0x47, 
  0x8D, 0xA5, 0x46, 0x23, 0x12, 0x2D, 0x95, 0x44, 0xB8, 0x40, 
  0x24, 0x2B, 0x17, 0x93, 0x6F, 0xFD, 0xE6, 0x9C, 0xAA, 0x77, 
  0xB0, 0x2C, 0xF7, 0xC6, 0x7A, 0xE9, 0xF0, 0x9E, 0x85, 0xD2, 
  0x8E, 0xDB, 0x7E, 0x97, 0x3A, 0x75, 0xD3, 0x86, 0x38, 0x1C, 
  0xF8, 0x36, 0x4C, 0x00, 0xBB, 0xD5, 0x61, 0x19, 0xAE, 0x9A, 
  0x69, 0x5C, 0x3D, 0x22, 0x41, 0x65]
vip = 0
while(vip<len(bytecode)):
    if(bytecode[vip]==case[0]):
        print(hex(vip)+":","MOVI "+hex((bytecode[vip+3]<<8)+bytecode[vip+2]))
        vip += 4
    elif(bytecode[vip]==case[1]):
        print(hex(vip)+":","MOVR")
        vip += 2
    elif(bytecode[vip]==case[2]):
        print(hex(vip)+":","LODI"+f" input_w[{bytecode[vip+2]}]")
        vip += 4
    elif(bytecode[vip]==case[3]):
        print(hex(vip)+":","LODR")
        vip += 2
    elif(bytecode[vip]==case[4]):
        print(hex(vip)+":","STRI")
        vip+= 4
    elif(bytecode[vip]==case[5]):
        print(hex(vip)+":","STRR")
        vip+= 2
    elif(bytecode[vip]==case[6]):
        print(hex(vip)+":","ADDI "+hex((bytecode[vip+3]<<8) + bytecode[vip+2]))
        vip+= 4
    elif(bytecode[vip]==case[7]):
        print(hex(vip)+":","ADDR")
        vip+= 2            
    elif(bytecode[vip]==case[8]):
        print(hex(vip)+":","SUBI "+hex((bytecode[vip+3]<<8) + bytecode[vip+2]))
        vip+= 4
    elif(bytecode[vip]==case[9]):
        print(hex(vip)+":","SUBR")
        vip+= 2        
    elif(bytecode[vip]==case[10]):
        print(hex(vip)+":","ANDB")
        vip+= 3
    elif(bytecode[vip]==case[11]):
        print(hex(vip)+":","ANDW")
        vip+= 4
    elif(bytecode[vip]==case[12]):
        print(hex(vip)+":","ANDR")
        vip+= 2       
    elif(bytecode[vip]==case[13]):
        print(hex(vip)+":","YORB")
        vip+= 3
    elif(bytecode[vip]==case[14]):
        print(hex(vip)+":","YORW")
        vip+= 4 
    elif(bytecode[vip]==case[15]):
        print(hex(vip)+":","YORR")
        vip+= 2
    elif(bytecode[vip]==case[16]):
        print(hex(vip)+":","XORB")
        vip+= 3
    elif(bytecode[vip]==case[17]):
        print(hex(vip)+":","XORW")
        vip+= 4 
    elif(bytecode[vip]==case[18]):
        print(hex(vip)+":","XORR")
        vip+= 2
    elif(bytecode[vip]==case[19]):
        print(hex(vip)+":","NOTR")
        vip+= 2
    elif(bytecode[vip]==case[20]):
        print(hex(vip)+":","MULI")
        vip+= 4        
    elif(bytecode[vip]==case[22]):
        print(hex(vip)+":","MULR")
        vip+= 2
    elif(bytecode[vip]==case[22]):
        print(hex(vip)+":","DIVI")
        vip+= 4              
    elif(bytecode[vip]==case[23]):
        print(hex(vip)+":","DIVR")
        vip+= 2
    elif(bytecode[vip]==case[24]):
        print(hex(vip)+":","SHLI")
        vip+= 4
    elif(bytecode[vip]==case[25]):
        print(hex(vip)+":","SHLR")
        vip+= 2
    elif(bytecode[vip]==case[26]):
        print(hex(vip)+":","SHRI")
        vip+= 4
    elif(bytecode[vip]==case[27]):
        print(hex(vip)+":","SHRR")
        vip+= 2
    elif(bytecode[vip]==case[28]):
        print(hex(vip)+":","PUSH")
        vip+= 2
    elif(bytecode[vip]==case[29]):
        print(hex(vip)+":","POOP")
        vip+= 2
    elif(bytecode[vip]==case[30]):
        print(hex(vip)+":","CMPB")
        vip+= 3
    elif(bytecode[vip]==case[31]):
        print(hex(vip)+":","CMPW "+hex((bytecode[vip+3]<<8)+bytecode[vip+2]))
        vip+= 4
    elif(bytecode[vip]==case[32]):
        print(hex(vip)+":","CMPR")
        vip+= 2
    elif(bytecode[vip]==case[33]):
        print(hex(vip)+":","JMPI")
        vip+= 3
    elif(bytecode[vip]==case[34]):
        print(hex(vip)+":","JMPR")
        vip+= 2
    elif(bytecode[vip]==case[35]):
        print(hex(vip)+":","JPAI")
        vip+= 3
    elif(bytecode[vip]==case[36]):
        print(hex(vip)+":","JPAR")
        vip+= 2
    elif(bytecode[vip]==case[37]):
        print(hex(vip)+":","JPBI")
        vip+= 3
    elif(bytecode[vip]==case[38]):
        print(hex(vip)+":","JPBR")
        vip+= 2
    elif(bytecode[vip]==case[39]):
        print(hex(vip)+":","JPEI")
        vip+= 3
    elif(bytecode[vip]==case[40]):
        print(hex(vip)+":","JPER")
        vip+= 2
    elif(bytecode[vip]==case[41]):
        print(hex(vip)+":","JPNI "+hex((bytecode[vip+2]<<8)+bytecode[vip+1]))
        vip+= 3
    elif(bytecode[vip]==case[42]):
        print(hex(vip)+":","JPNR")
        vip+= 2
    elif(bytecode[vip]==case[43]):
        print(hex(vip)+":","CALL")
        vip+= 3
    elif(bytecode[vip]==case[44]):
        print(hex(vip)+":","RET")
        vip+= 1
    elif(bytecode[vip]==case[45]):
        print(hex(vip)+":","xor al, al")
        vip+= 1
    elif(bytecode[vip]==case[46]):
        print(hex(vip)+":","print"+" wrong")
        vip+= 1
    elif(bytecode[vip]==case[47]):
        print(hex(vip)+":","print"+" correct")
        vip+= 1
    """
0x0: LODI input_w[0]
0x4: ADDI 0x3bd
0x8: CMPW 0x5113
0xc: JPNI 0x133
0xf: LODI input_w[2]
0x13: MOVI 0x2e
0x17: XORR
0x19: CMPW 0x306d
0x1d: JPNI 0x133
0x20: LODI input_w[4]
0x24: MOVI 0xb
0x28: XORR
0x2a: CMPW 0x336f
0x2e: JPNI 0x133
0x31: LODI input_w[6]
0x35: ADDI 0x369
0x39: CMPW 0x34c8
0x3d: JPNI 0x133
0x40: LODI input_w[8]
0x44: MOVI 0x2b
0x48: XORR
0x4a: MOVI 0x57
0x4e: XORR
0x50: CMPW 0x5f0f
0x54: JPNI 0x133
0x57: LODI input_w[10]
0x5b: MOVI 0x61
0x5f: XORR
0x61: MOVI 0x61
0x65: XORR
0x67: MOVI 0x40
0x6b: XORR
0x6d: CMPW 0x6823
0x71: JPNI 0x133
0x74: LODI input_w[12]
0x78: SUBI 0x34f
0x7c: CMPW 0x2de5
0x80: JPNI 0x133
0x83: LODI input_w[14]
0x87: MOVI 0x46
0x8b: XORR
0x8d: CMPW 0x3377
0x91: JPNI 0x133
0x94: LODI input_w[16]
0x98: MOVI 0x1f
0x9c: XORR
0x9e: MOVI 0x1c
0xa2: XORR
0xa4: MOVI 0x26
0xa8: XORR
0xaa: CMPW 0x394b
0xae: JPNI 0x133
0xb1: LODI input_w[18]
0xb5: MOVI 0xf
0xb9: XORR
0xbb: MOVI 0x57
0xbf: XORR
0xc1: MOVI 0x3f
0xc5: XORR
0xc7: CMPW 0x5f54
0xcb: JPNI 0x133
0xce: LODI input_w[20]
0xd2: MOVI 0x37
0xd6: XORR
0xd8: MOVI 0x58
0xdc: XORR
0xde: MOVI 0x4c
0xe2: XORR
0xe4: CMPW 0x3141
0xe8: JPNI 0x133
0xeb: LODI input_w[22]
0xef: MOVI 0x24
0xf3: XORR
0xf5: CMPW 0x5f1d
0xf9: JPNI 0x133
0xfc: LODI input_w[24]
0x100: MOVI 0x1a
0x104: XORR
0x106: MOVI 0x1c
0x10a: XORR
0x10c: CMPW 0x346e
0x110: JPNI 0x133
0x113: LODI input_w[26]
0x117: SUBI 0x380
0x11b: CMPW 0x60ee
0x11f: JPNI 0x133
0x122: LODI input_w[28]
0x126: SUBI 0x109
0x12a: CMPW 0x206a
0x12e: JPNI 0x133
0x131: print correct
0x132: xor al, al
0x133: print wrong
"""
