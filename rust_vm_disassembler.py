bytecode = [ 0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x70, 0x00, 0x01, 0x02, 
  0x02, 0x00, 0x19, 0x01, 0x00, 0x02, 0x01, 0x02, 0x19, 0x01, 
  0x00, 0x02, 0x01, 0x02, 0x01, 0x00, 0x02, 0x00, 0x19, 0x01, 
  0x00, 0x02, 0x01, 0x02, 0x19, 0x01, 0x00, 0x01, 0x00, 0xFF, 
  0xFF, 0x02, 0x01, 0x02, 0x19, 0x01, 0x00, 0x02, 0x01, 0x02, 
  0x19, 0x01, 0x00, 0x01, 0x00, 0xFE, 0xFF, 0x02, 0x01, 0x02, 
  0x19, 0x01, 0x00, 0x02, 0x01, 0x02, 0x19, 0x01, 0x00, 0x01, 
  0x00, 0x02, 0x00, 0x01, 0x01, 0x80, 0x00, 0x19, 0x01, 0x00, 
  0x01, 0x00, 0xFE, 0xFF, 0x02, 0x01, 0x02, 0x19, 0x01, 0x00, 
  0x01, 0x00, 0x01, 0x00, 0x02, 0x01, 0x02, 0x19, 0x01, 0x00, 
  0x01, 0x00, 0xFF, 0xFF, 0x02, 0x01, 0x02, 0x19, 0x01, 0x00, 
  0x01, 0x00, 0x02, 0x00, 0x02, 0x01, 0x02, 0x19, 0x01, 0x00, 
  0x01, 0x00, 0xFE, 0xFF, 0x02, 0x01, 0x02, 0x19, 0x01, 0x00, 
  0x01, 0x00, 0x01, 0x00, 0x02, 0x01, 0x02, 0x19, 0x01, 0x00, 
  0x01, 0x00, 0xFF, 0xFF, 0x02, 0x01, 0x02, 0x19, 0x01, 0x00, 
  0x01, 0x07, 0x02, 0x00, 0x01, 0x08, 0x06, 0x00, 0x1A, 0x68, 
  0x01, 0x01, 0x03, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x02, 
  0x01, 0x03, 0x04, 0x01, 0x01, 0x00, 0x02, 0x01, 0x01, 0x04, 
  0x04, 0x00, 0x0E, 0x02, 0x04, 0x01, 0x04, 0x0F, 0x00, 0x0B, 
  0x01, 0x04, 0x1A, 0xF1, 0x00, 0x01, 0x04, 0x00, 0x00, 0x11, 
  0x00, 0x04, 0x13, 0xED, 0x00, 0x00, 0x07, 0x01, 0x00, 0x08, 
  0x02, 0x1A, 0x8C, 0x01, 0x01, 0x04, 0x01, 0x00, 0x11, 0x00, 
  0x04, 0x13, 0xED, 0x00, 0x1A, 0x68, 0x01, 0x01, 0x01, 0x01, 
  0x00, 0x02, 0x03, 0x01, 0x12, 0xA5, 0x00, 0x1A, 0xAC, 0x01, 
  0x17, 0x0F, 0x03, 0x0F, 0x04, 0x0F, 0x05, 0x0F, 0x06, 0x01, 
  0x03, 0x07, 0x00, 0x01, 0x04, 0xFF, 0xFF, 0x11, 0x01, 0x04, 
  0x16, 0x54, 0x01, 0x11, 0x01, 0x03, 0x15, 0x54, 0x01, 0x11, 
  0x02, 0x04, 0x16, 0x54, 0x01, 0x11, 0x02, 0x03, 0x15, 0x54, 
  0x01, 0x01, 0x04, 0x00, 0x00, 0x01, 0x03, 0x70, 0x00, 0x02, 
  0x03, 0x04, 0x05, 0x03, 0x03, 0x02, 0x03, 0x07, 0x11, 0x03, 
  0x01, 0x14, 0x43, 0x01, 0x01, 0x03, 0x80, 0x00, 0x02, 0x03, 
  0x04, 0x05, 0x03, 0x03, 0x02, 0x03, 0x08, 0x11, 0x03, 0x02, 
  0x13, 0x5B, 0x01, 0x01, 0x03, 0x02, 0x00, 0x02, 0x04, 0x03, 
  0x01, 0x03, 0x0E, 0x00, 0x11, 0x04, 0x03, 0x16, 0x1D, 0x01, 
  0x01, 0x00, 0x00, 0x00, 0x12, 0x5F, 0x01, 0x01, 0x00, 0x01, 
  0x00, 0x10, 0x06, 0x10, 0x05, 0x10, 0x04, 0x10, 0x03, 0x1B, 
  0x0F, 0x01, 0x0F, 0x02, 0x0F, 0x03, 0x01, 0x01, 0xA0, 0x00, 
  0x02, 0x01, 0x08, 0x04, 0x03, 0x01, 0x01, 0x02, 0x01, 0x00, 
  0x0D, 0x02, 0x07, 0x0C, 0x03, 0x02, 0x18, 0x01, 0x03, 0x10, 
  0x03, 0x10, 0x02, 0x10, 0x01, 0x1B, 0x0F, 0x01, 0x0F, 0x02, 
  0x01, 0x01, 0xA0, 0x00, 0x02, 0x01, 0x08, 0x04, 0x01, 0x01, 
  0x0E, 0x01, 0x07, 0x01, 0x02, 0x01, 0x00, 0x0B, 0x01, 0x02, 
  0x00, 0x00, 0x01, 0x10, 0x02, 0x10, 0x01, 0x1B, 0x0F, 0x01, 
  0x0F, 0x02, 0x0F, 0x03, 0x0F, 0x04, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x01, 0xA0, 0x00, 0x01, 0x02, 0xA8, 0x00, 0x01, 0x03, 
  0x01, 0x00, 0x04, 0x04, 0x01, 0x02, 0x00, 0x04, 0x02, 0x01, 
  0x03, 0x11, 0x01, 0x02, 0x14, 0xC4, 0x01, 0x01, 0x01, 0xF8, 
  0x07, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x11, 0x01, 
  0x02, 0x14, 0xFC, 0x01, 0x01, 0x01, 0x07, 0x00, 0x11, 0x07, 
  0x01, 0x14, 0xFC, 0x01, 0x01, 0x01, 0x02, 0x00, 0x11, 0x08, 
  0x01, 0x14, 0xFC, 0x01, 0x01, 0x00, 0x01, 0x00, 0x10, 0x04, 
  0x10, 0x03, 0x10, 0x02, 0x10, 0x01, 0x1B]
vip = 0
registers = [0]*9
stack = []
while(vip < len(bytecode)):
    if(bytecode[vip]==0):
        print(hex(vip)+": ","mov "+f"r{bytecode[vip+1]}, "+f"r{bytecode[vip+2]}")
        vip+= 3
    if(bytecode[vip]==1):
        print(hex(vip)+": ","mov "+f"r{bytecode[vip+1]}"+", "+f"{hex(((bytecode[vip+3]<<8)|bytecode[vip+2]))}")
        vip+= 4
    elif(bytecode[vip]==2):
        print(hex(vip)+": ","add "+f"r{bytecode[vip+1]},"+f" r{bytecode[vip+2]}")
        vip+= 3
    elif(bytecode[vip]==3):
        print(hex(vip)+": ","sub "+f"r{bytecode[vip+1]},"+f" r{bytecode[vip+2]}")
        vip+= 3
    elif(bytecode[vip]==4):
        print(hex(vip)+": ","mov "+f" r{bytecode[vip+1]},"+f" BYTE [r{bytecode[vip+2]}]")
        vip+= 3
    elif(bytecode[vip]==5):
        print(hex(vip)+": ","mov "+f"r{bytecode[vip+1]}, "+f"WORD [r{bytecode[vip+2]}]")
        vip+= 3
    elif(bytecode[vip]==6):
        print(hex(vip)+": ","mul "+f"r{bytecode[vip+1]}, "+f"r{bytecode[vip+2]}")
        vip+= 3
    elif(bytecode[vip]==7):
        print(hex(vip)+": ","div "+f"r{bytecode[vip+1]}, "+f"r{bytecode[vip+2]}")
        vip+= 3
    elif(bytecode[vip]==8):
        print(hex(vip)+": ","mod "+f"r{bytecode[vip+1]}, "+f"r{bytecode[vip+2]}")
        vip+= 3
    elif(bytecode[vip]==9):
        print(hex(vip)+": ","xor "+f"r{bytecode[vip+1]}, "+f"r{bytecode[vip+2]}")
        vip+= 3
    elif(bytecode[vip]==10):
        print(hex(vip)+": ","not "+f"r{bytecode[vip+1]}")
        vip+=2
    elif(bytecode[vip]==11):
        print(hex(vip)+": ","and "+f"r{bytecode[vip+1]}, "+f"r{bytecode[vip+2]}")
        vip+=3
    elif(bytecode[vip]==12):
        print(hex(vip)+": ","or "+f"r{bytecode[vip+1]}, "+f"r{bytecode[vip+2]}")
        vip+=3
    elif(bytecode[vip]==13):
        print(hex(vip)+": ","shl "+f"r{bytecode[vip+1]}, "+f"r{bytecode[vip+2]}")
        vip+=3
    elif(bytecode[vip]==14):
        print(hex(vip)+": ","shr "+f"r{bytecode[vip+1]}, "+f"r{bytecode[vip+2]}")
        vip+=3
    elif(bytecode[vip]==15):
        print(hex(vip)+": ","push "+f"r{bytecode[vip+1]}")
        vip+=2
    elif(bytecode[vip]==16):
        print(hex(vip)+": ","pop "+f"r{bytecode[vip+1]}")
        vip+=2
    elif(bytecode[vip]==17):
        print(hex(vip)+": ","cmp "+f"r{bytecode[vip+1]}, "+f"r{bytecode[vip+2]}")
        vip+=3
    elif(bytecode[vip]==18):
        print(hex(vip)+": ","jmp "+f"{hex(bytecode[vip+1]|(bytecode[vip+2]<<8))}")
        vip+=3
    elif(bytecode[vip]==19):
        print(hex(vip)+": ","jnz "+f"{hex(bytecode[vip+1]|(bytecode[vip+2]<<8))}")
        vip+=3
    elif(bytecode[vip]==20):
        print(hex(vip)+": ","jz "+f"{hex(bytecode[vip+1]|(bytecode[vip+2]<<8))}")
        vip+=3
    elif(bytecode[vip]==21):
        print(hex(vip)+": ","jg "+f"{hex(bytecode[vip+1]|(bytecode[vip+2]<<8))}")
        vip+=3
    elif(bytecode[vip]==22):
        print(hex(vip)+": ","jl "+f"{hex(bytecode[vip+1]|(bytecode[vip+2]<<8))}")
        vip+=3
    elif(bytecode[vip]==23):
        print("Check")
        vip+=1
    elif(bytecode[vip]==24):
        print(hex(vip)+": ",f"mov [r{bytecode[vip+1]}],"+f" r{bytecode[vip+2]}")
        vip+=3   
    elif(bytecode[vip]==25):
        print(hex(vip)+": ",f"mov WORD [r{bytecode[vip+1]}],"+f" r{bytecode[vip+2]}")
        vip+= 3
    elif(bytecode[vip]==26):
        print(hex(vip)+": ",f"call "+f"{hex(bytecode[vip+1]|(bytecode[vip+2]<<8))}")
        vip+=3
    elif(bytecode[vip]==27):
        print(hex(vip)+": ","ret")
        vip+=1
    elif(bytecode[vip]==28):
        print(hex(vip)+": ","nop")
        vip+= 1
    """
    0x0:  mov r0, 0x1
0x4:  mov r1, 0x70
0x8:  mov r2, 0x2
0xc:  mov WORD [r1], r0
0xf:  add r1, r2
0x12:  mov WORD [r1], r0
0x15:  add r1, r2
0x18:  mov r0, 0x2
0x1c:  mov WORD [r1], r0
0x1f:  add r1, r2
0x22:  mov WORD [r1], r0
0x25:  mov r0, 0xffff
0x29:  add r1, r2
0x2c:  mov WORD [r1], r0
0x2f:  add r1, r2
0x32:  mov WORD [r1], r0
0x35:  mov r0, 0xfffe
0x39:  add r1, r2
0x3c:  mov WORD [r1], r0
0x3f:  add r1, r2
0x42:  mov WORD [r1], r0
0x45:  mov r0, 0x2
0x49:  mov r1, 0x80
0x4d:  mov WORD [r1], r0
0x50:  mov r0, 0xfffe
0x54:  add r1, r2
0x57:  mov WORD [r1], r0
0x5a:  mov r0, 0x1
0x5e:  add r1, r2
0x61:  mov WORD [r1], r0
0x64:  mov r0, 0xffff
0x68:  add r1, r2
0x6b:  mov WORD [r1], r0
0x6e:  mov r0, 0x2
0x72:  add r1, r2
0x75:  mov WORD [r1], r0
0x78:  mov r0, 0xfffe
0x7c:  add r1, r2
0x7f:  mov WORD [r1], r0
0x82:  mov r0, 0x1
0x86:  add r1, r2
0x89:  mov WORD [r1], r0
0x8c:  mov r0, 0xffff
0x90:  add r1, r2
0x93:  mov WORD [r1], r0
0x96:  mov r7, 0x2
0x9a:  mov r8, 0x6
0x9e:  call 0x168
0xa1:  mov r3, 0x0
0xa5:  mov r1, 0x0
0xa9:  add r1, r3
0xac:  mov  r1, BYTE [r1]
0xaf:  mov r2, r1
0xb2:  mov r4, 0x4
0xb6:  shr r2, r4
0xb9:  mov r4, 0xf
0xbd:  and r1, r4
0xc0:  call 0xf1
0xc3:  mov r4, 0x0
0xc7:  cmp r0, r4
0xca:  jnz 0xed
0xcd:  mov r7, r1
0xd0:  mov r8, r2
0xd3:  call 0x18c
0xd6:  mov r4, 0x1
0xda:  cmp r0, r4
0xdd:  jnz 0xed
0xe0:  call 0x168
0xe3:  mov r1, 0x1
0xe7:  add r3, r1
0xea:  jmp 0xa5
0xed:  call 0x1ac
Check
0xf1:  push r3
0xf3:  push r4
0xf5:  push r5
0xf7:  push r6
0xf9:  mov r3, 0x7
0xfd:  mov r4, 0xffff
0x101:  cmp r1, r4
0x104:  jl 0x154
0x107:  cmp r1, r3
0x10a:  jg 0x154
0x10d:  cmp r2, r4
0x110:  jl 0x154
0x113:  cmp r2, r3
0x116:  jg 0x154
0x119:  mov r4, 0x0
0x11d:  mov r3, 0x70
0x121:  add r3, r4
0x124:  mov r3, WORD [r3]
0x127:  add r3, r7
0x12a:  cmp r3, r1
0x12d:  jz 0x143
0x130:  mov r3, 0x80
0x134:  add r3, r4
0x137:  mov r3, WORD [r3]
0x13a:  add r3, r8
0x13d:  cmp r3, r2
0x140:  jnz 0x15b
0x143:  mov r3, 0x2
0x147:  add r4, r3
0x14a:  mov r3, 0xe
0x14e:  cmp r4, r3
0x151:  jl 0x11d
0x154:  mov r0, 0x0
0x158:  jmp 0x15f
0x15b:  mov r0, 0x1
0x15f:  pop r6
0x161:  pop r5
0x163:  pop r4
0x165:  pop r3
0x167:  ret
0x168:  push r1
0x16a:  push r2
0x16c:  push r3
0x16e:  mov r1, 0xa0
0x172:  add r1, r8
0x175:  mov  r3, BYTE [r1]
0x178:  mov r2, 0x1
0x17c:  shl r2, r7
0x17f:  or r3, r2
0x182:  mov [r1], r3
0x185:  pop r3
0x187:  pop r2
0x189:  pop r1
0x18b:  ret
0x18c:  push r1
0x18e:  push r2
0x190:  mov r1, 0xa0
0x194:  add r1, r8
0x197:  mov  r1, BYTE [r1]
0x19a:  shr r1, r7
0x19d:  mov r2, 0x1
0x1a1:  and r1, r2
0x1a4:  mov r0, r1
0x1a7:  pop r2
0x1a9:  pop r1
0x1ab:  ret
0x1ac:  push r1
0x1ae:  push r2
0x1b0:  push r3
0x1b2:  push r4
0x1b4:  mov r0, 0x0
0x1b8:  mov r1, 0xa0
0x1bc:  mov r2, 0xa8
0x1c0:  mov r3, 0x1
0x1c4:  mov  r4, BYTE [r1]
0x1c7:  add r0, r4
0x1ca:  add r1, r3
0x1cd:  cmp r1, r2
0x1d0:  jz 0x1c4
0x1d3:  mov r1, 0x7f8
0x1d7:  mov r2, r0
0x1da:  mov r0, 0x0
0x1de:  cmp r1, r2
0x1e1:  jz 0x1fc
0x1e4:  mov r1, 0x7
0x1e8:  cmp r7, r1
0x1eb:  jz 0x1fc
0x1ee:  mov r1, 0x2
0x1f2:  cmp r8, r1
0x1f5:  jz 0x1fc
0x1f8:  mov r0, 0x1
0x1fc:  pop r4
0x1fe:  pop r3
0x200:  pop r2
0x202:  pop r1
0x204:  ret
    """